/* zt_common_h.in -- Process this file with configure to produce common.h */

#define XCALLOC(type, num)	((type *) xcalloc ((num), sizeof(type)))
#define XMALLOC(type, num)	((type *) xmalloc ((num) * sizeof(type)))
#define XREALLOC(type, p, num)	((type *) xrealloc ((p), (num) * sizeof(type)))
#define XFREE(stale)   	  	       	  	   	 \
do {							 \
   if (stale) { free ((void_p) stale);  stale = 0; }	 \
} while(0)
#define XSTRDUP xstrdup

BEGIN_C_DECLS

/* These entry points to the API are guaranteed to be functions */

extern void_p xcalloc_p	_((size_t num, size_t size));
extern void_p xmalloc_p	_((size_t num));
extern void_p xrealloc_p _((void_p p, size_t num));
extern void xfree_p _((void_p stale));
extern char *xstrdup _((const char *string));

END_C_DECLS

/* Let dmalloc provide mainstream `x' family mallocation API, or else
   provide our own which points to the `f_' family above.  Note that
   when using dmalloc, the functions wrapped by my `f_' API will be
   (correctly) redefined to use the dmalloc library. */

#if WITH_DMALLOC
#  include <dmalloc.h>
#else
#  define xcalloc  xcalloc_p
#  define xmalloc  xmalloc_p
#  define xrealloc xrealloc_p
#  define xfree    xfree_p
#endif

